{
    "sourceFile": "jest.config.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1686365440539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1686366801950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+// For a detailed explanation regarding each configuration property, visit:\n+// https://jestjs.io/docs/en/configuration.html\n+\n+module.exports = {\n+\t\"testTimeout\": 100000,\n+\tpreset: 'jest-puppeteer',\n+\ttestRegex: './*\\\\.test\\\\.js$',\n+\treporters: [\n+\t\t'default',\n+\t\t['jest-html-reporters', { publicPath: './test-reports/html-reports' }],\n+\t  ],\n+\t// All imported modules in your tests should be mocked automatically\n+\t// automock: false,\n+\t// Stop running tests after `n` failures\n+\t// bail: 0,\n+\tbail: 0,\n+\t// The directory where Jest should store its cached dependency information\n+\t// cacheDirectory: \"/private/var/folders/lg/6rs1p2fd2ml9b9nhtmd1sb6w0000gn/T/jest_dx\",\n+\t// Automatically clear mock calls and instances between every test\n+\t// clearMocks: false,\n+\t// Indicates whether the coverage information should be collected while executing the test\n+\t// collectCoverage: false,\n+\t// An array of glob patterns indicating a set of files for which coverage information should be collected\n+\t// collectCoverageFrom: undefined,\n+\t// The directory where Jest should output its coverage files\n+\t// coverageDirectory: undefined,\n+\t// An array of regexp pattern strings used to skip coverage collection\n+\t// coveragePathIgnorePatterns: [\n+\t//   \"/node_modules/\"\n+\t// ],\n+\t// Indicates which provider should be used to instrument code for coverage\n+\t// coverageProvider: \"babel\",\n+\t// A list of reporter names that Jest uses when writing coverage reports\n+\t// coverageReporters: [\n+\t//   \"json\",\n+\t//   \"text\",\n+\t//   \"lcov\",\n+\t//   \"clover\"\n+\t// ],\n+\t// An object that configures minimum threshold enforcement for coverage results\n+\t// coverageThreshold: undefined,\n+\t// A path to a custom dependency extractor\n+\t// dependencyExtractor: undefined,\n+\t// Make calling deprecated APIs throw helpful error messages\n+\t// errorOnDeprecated: false,\n+\t// Force coverage collection from ignored files using an array of glob patterns\n+\t// forceCoverageMatch: [],\n+\t// A path to a module which exports an async function that is triggered once before all test suites\n+\t// globalSetup: undefined,\n+\t// A path to a module which exports an async function that is triggered once after all test suites\n+\t// globalTeardown: undefined,\n+\t// A set of global variables that need to be available in all test environments\n+\t// globals: {},\n+\t// The maximum amount of workers used to run your tests. Can be specified as % or a number. E.g. maxWorkers: 10% will use 10% of your CPU amount + 1 as the maximum worker number. maxWorkers: 2 will use a maximum of 2 workers.\n+\t// maxWorkers: \"50%\",\n+\t// An array of directory names to be searched recursively up from the requiring module's location\n+\t// moduleDirectories: [\n+\t//   \"node_modules\"\n+\t// ],\n+\t// An array of file extensions your modules use\n+\t// moduleFileExtensions: [\n+\t//   \"js\",\n+\t//   \"json\",\n+\t//   \"jsx\",\n+\t//   \"ts\",\n+\t//   \"tsx\",\n+\t//   \"node\"\n+\t// ],\n+\t// A map from regular expressions to module names or to arrays of module names that allow to stub out resources with a single module\n+\t// moduleNameMapper: {},\n+\t// An array of regexp pattern strings, matched against all module paths before considered 'visible' to the module loader\n+\t// modulePathIgnorePatterns: [],\n+\t// Activates notifications for test results\n+\t// notify: false,\n+\t// An enum that specifies notification mode. Requires { notify: true }\n+\t// notifyMode: \"failure-change\",\n+\t// A preset that is used as a base for Jest's configuration\n+\t// preset: undefined,\n+\tpreset: 'jest-puppeteer',\n+\t// Run tests from one or more projects\n+\t// projects: undefined,\n+\t// Use this configuration option to add custom reporters to Jest\n+\t// reporters: undefined,\n+\t// Automatically reset mock state between every test\n+\t// resetMocks: false,\n+\t// Reset the module registry before running each individual test\n+\t// resetModules: false,\n+\t// A path to a custom resolver\n+\t// resolver: undefined,\n+\t// Automatically restore mock state between every test\n+\t// restoreMocks: false,\n+\t// The root directory that Jest should scan for tests and modules within\n+\t// rootDir: undefined,\n+\t// A list of paths to directories that Jest should use to search for files in\n+\t// roots: [\n+\t//   \"<rootDir>\"\n+\t// ],\n+\t// Allows you to use a custom runner instead of Jest's default test runner\n+\t// runner: \"jest-runner\",\n+\t// The paths to modules that run some code to configure or set up the testing environment before each test\n+\t// setupFiles: [],\n+\t// A list of paths to modules that run some code to configure or set up the testing framework before each test\n+\t// setupFilesAfterEnv: [],\n+\t// The number of seconds after which a test is considered as slow and reported as such in the results.\n+\t// slowTestThreshold: 5,\n+\t// A list of paths to snapshot serializer modules Jest should use for snapshot testing\n+\t// snapshotSerializers: [],\n+\t// The test environment that will be used for testing\n+\t// testEnvironment: \"node\",\n+\t// Options that will be passed to the testEnvironment\n+\t// testEnvironmentOptions: {},\n+\t// Adds a location field to test results\n+\t// testLocationInResults: false,\n+\t// The glob patterns Jest uses to detect test files\n+\t// testMatch: [\n+\t//   \"**/__tests__/**/*.[jt]s?(x)\",\n+\t//   \"**/?(*.)+(spec|test).[tj]s?(x)\"\n+\t// ],\n+\t// An array of regexp pattern strings that are matched against all test paths, matched tests are skipped\n+\t// testPathIgnorePatterns: [\n+\t//   \"/node_modules/\"\n+\t// ],\n+\t// The regexp pattern or array of patterns that Jest uses to detect test files\n+\t// testRegex: [],\n+\t// This option allows the use of a custom results processor\n+\t// testResultsProcessor: undefined,\n+\t// This option allows use of a custom test runner\n+\t// testRunner: \"jasmine2\",\n+\t// This option sets the URL for the jsdom environment. It is reflected in properties such as location.href\n+\t// testURL: \"http://localhost\",\n+\t// Setting this value to \"fake\" allows the use of fake timers for functions such as \"setTimeout\"\n+\t// timers: \"real\",\n+\t// A map from regular expressions to paths to transformers\n+\t// transform: undefined,\n+\t// An array of regexp pattern strings that are matched against all source file paths, matched files will skip transformation\n+\t// transformIgnorePatterns: [\n+\t//   \"/node_modules/\",\n+\t//   \"\\\\.pnp\\\\.[^\\\\/]+$\"\n+\t// ],\n+\t// An array of regexp pattern strings that are matched against all modules before the module loader will automatically return a mock for them\n+\t// unmockedModulePathPatterns: undefined,\n+\t// Indicates whether each individual test should be reported during the run\n+\t// verbose: undefined,\n+\t// An array of regexp patterns that are matched against all source file paths before re-running tests in watch mode\n+\t// watchPathIgnorePatterns: [],\n+\t// Whether to use watchman for file crawling\n+\t// watchman: true,\n+}\n"
                }
            ],
            "date": 1686365440539,
            "name": "Commit-0",
            "content": "// For a detailed explanation regarding each configuration property, visit:\n// https://jestjs.io/docs/en/configuration.html\n\nmodule.exports = {\n\t\"testTimeout\": 100000,\n\tpreset: 'jest-puppeteer',\n\ttestRegex: './*\\\\.test\\\\.js$',\n\t// All imported modules in your tests should be mocked automatically\n\t// automock: false,\n\t// Stop running tests after `n` failures\n\t// bail: 0,\n\tbail: 0,\n\t// The directory where Jest should store its cached dependency information\n\t// cacheDirectory: \"/private/var/folders/lg/6rs1p2fd2ml9b9nhtmd1sb6w0000gn/T/jest_dx\",\n\t// Automatically clear mock calls and instances between every test\n\t// clearMocks: false,\n\t// Indicates whether the coverage information should be collected while executing the test\n\t// collectCoverage: false,\n\t// An array of glob patterns indicating a set of files for which coverage information should be collected\n\t// collectCoverageFrom: undefined,\n\t// The directory where Jest should output its coverage files\n\t// coverageDirectory: undefined,\n\t// An array of regexp pattern strings used to skip coverage collection\n\t// coveragePathIgnorePatterns: [\n\t//   \"/node_modules/\"\n\t// ],\n\t// Indicates which provider should be used to instrument code for coverage\n\t// coverageProvider: \"babel\",\n\t// A list of reporter names that Jest uses when writing coverage reports\n\t// coverageReporters: [\n\t//   \"json\",\n\t//   \"text\",\n\t//   \"lcov\",\n\t//   \"clover\"\n\t// ],\n\t// An object that configures minimum threshold enforcement for coverage results\n\t// coverageThreshold: undefined,\n\t// A path to a custom dependency extractor\n\t// dependencyExtractor: undefined,\n\t// Make calling deprecated APIs throw helpful error messages\n\t// errorOnDeprecated: false,\n\t// Force coverage collection from ignored files using an array of glob patterns\n\t// forceCoverageMatch: [],\n\t// A path to a module which exports an async function that is triggered once before all test suites\n\t// globalSetup: undefined,\n\t// A path to a module which exports an async function that is triggered once after all test suites\n\t// globalTeardown: undefined,\n\t// A set of global variables that need to be available in all test environments\n\t// globals: {},\n\t// The maximum amount of workers used to run your tests. Can be specified as % or a number. E.g. maxWorkers: 10% will use 10% of your CPU amount + 1 as the maximum worker number. maxWorkers: 2 will use a maximum of 2 workers.\n\t// maxWorkers: \"50%\",\n\t// An array of directory names to be searched recursively up from the requiring module's location\n\t// moduleDirectories: [\n\t//   \"node_modules\"\n\t// ],\n\t// An array of file extensions your modules use\n\t// moduleFileExtensions: [\n\t//   \"js\",\n\t//   \"json\",\n\t//   \"jsx\",\n\t//   \"ts\",\n\t//   \"tsx\",\n\t//   \"node\"\n\t// ],\n\t// A map from regular expressions to module names or to arrays of module names that allow to stub out resources with a single module\n\t// moduleNameMapper: {},\n\t// An array of regexp pattern strings, matched against all module paths before considered 'visible' to the module loader\n\t// modulePathIgnorePatterns: [],\n\t// Activates notifications for test results\n\t// notify: false,\n\t// An enum that specifies notification mode. Requires { notify: true }\n\t// notifyMode: \"failure-change\",\n\t// A preset that is used as a base for Jest's configuration\n\t// preset: undefined,\n\tpreset: 'jest-puppeteer',\n\t// Run tests from one or more projects\n\t// projects: undefined,\n\t// Use this configuration option to add custom reporters to Jest\n\t// reporters: undefined,\n\t// Automatically reset mock state between every test\n\t// resetMocks: false,\n\t// Reset the module registry before running each individual test\n\t// resetModules: false,\n\t// A path to a custom resolver\n\t// resolver: undefined,\n\t// Automatically restore mock state between every test\n\t// restoreMocks: false,\n\t// The root directory that Jest should scan for tests and modules within\n\t// rootDir: undefined,\n\t// A list of paths to directories that Jest should use to search for files in\n\t// roots: [\n\t//   \"<rootDir>\"\n\t// ],\n\t// Allows you to use a custom runner instead of Jest's default test runner\n\t// runner: \"jest-runner\",\n\t// The paths to modules that run some code to configure or set up the testing environment before each test\n\t// setupFiles: [],\n\t// A list of paths to modules that run some code to configure or set up the testing framework before each test\n\t// setupFilesAfterEnv: [],\n\t// The number of seconds after which a test is considered as slow and reported as such in the results.\n\t// slowTestThreshold: 5,\n\t// A list of paths to snapshot serializer modules Jest should use for snapshot testing\n\t// snapshotSerializers: [],\n\t// The test environment that will be used for testing\n\t// testEnvironment: \"node\",\n\t// Options that will be passed to the testEnvironment\n\t// testEnvironmentOptions: {},\n\t// Adds a location field to test results\n\t// testLocationInResults: false,\n\t// The glob patterns Jest uses to detect test files\n\t// testMatch: [\n\t//   \"**/__tests__/**/*.[jt]s?(x)\",\n\t//   \"**/?(*.)+(spec|test).[tj]s?(x)\"\n\t// ],\n\t// An array of regexp pattern strings that are matched against all test paths, matched tests are skipped\n\t// testPathIgnorePatterns: [\n\t//   \"/node_modules/\"\n\t// ],\n\t// The regexp pattern or array of patterns that Jest uses to detect test files\n\t// testRegex: [],\n\t// This option allows the use of a custom results processor\n\t// testResultsProcessor: undefined,\n\t// This option allows use of a custom test runner\n\t// testRunner: \"jasmine2\",\n\t// This option sets the URL for the jsdom environment. It is reflected in properties such as location.href\n\t// testURL: \"http://localhost\",\n\t// Setting this value to \"fake\" allows the use of fake timers for functions such as \"setTimeout\"\n\t// timers: \"real\",\n\t// A map from regular expressions to paths to transformers\n\t// transform: undefined,\n\t// An array of regexp pattern strings that are matched against all source file paths, matched files will skip transformation\n\t// transformIgnorePatterns: [\n\t//   \"/node_modules/\",\n\t//   \"\\\\.pnp\\\\.[^\\\\/]+$\"\n\t// ],\n\t// An array of regexp pattern strings that are matched against all modules before the module loader will automatically return a mock for them\n\t// unmockedModulePathPatterns: undefined,\n\t// Indicates whether each individual test should be reported during the run\n\t// verbose: undefined,\n\t// An array of regexp patterns that are matched against all source file paths before re-running tests in watch mode\n\t// watchPathIgnorePatterns: [],\n\t// Whether to use watchman for file crawling\n\t// watchman: true,\n}\n"
        }
    ]
}